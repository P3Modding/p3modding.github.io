<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries/>
  <UserdefinedSymbols/>
  <LuaScript>wareNames =
{
 [0x00] = "Grain",
 [0x01] = "Meat",
 [0x02] = "Fish",
 [0x03] = "Beer",
 [0x04] = "Salt",
 [0x05] = "Honey",
 [0x06] = "Spices",
 [0x07] = "Wine",
 [0x08] = "Cloth",
 [0x09] = "Skins",
 [0x0a] = "WhaleOil",
 [0x0b] = "Timber",
 [0x0c] = "IronGoods",
 [0x0d] = "Leather",
 [0x0e] = "Wool",
 [0x0f] = "Pitch",
 [0x10] = "PigIron",
 [0x11] = "Hemp",
 [0x12] = "Pottery",
 [0x13] = "Bricks",
 [0x14] = "Sword",
 [0x15] = "Bow",
 [0x16] = "Crossbow",
 [0x17] = "Carbine",
}

townNames =
{
 [0x00] = "Edinburgh",
 [0x01] = "Newcastle",
 [0x02] = "Scarborough",
 [0x03] = "Boston",
 [0x04] = "London",
 [0x05] = "Bruges",
 [0x06] = "Haarlem",
 [0x07] = "Harlingen",
 [0x08] = "Groningen",
 [0x09] = "Cologne",
 [0x0a] = "Bremen",
 [0x0b] = "Ripen",
 [0x0c] = "Hamburg",
 [0x0d] = "Flensburg",
 [0x0e] = "Luebeck",
 [0x0f] = "Rostock",
 [0x10] = "Bergen",
 [0x11] = "Stavanger",
 [0x12] = "Toensberg",
 [0x13] = "Oslo",
 [0x14] = "Aalborg",
 [0x15] = "Goeteborg",
 [0x16] = "Naestved",
 [0x17] = "Malmoe",
 [0x18] = "Ahus",
 [0x19] = "Stockholm",
 [0x1a] = "Visby",
 [0x1b] = "Helsinki",
 [0x1c] = "Stettin",
 [0x1d] = "Ruegenwald",
 [0x1e] = "Gdansk",
 [0x1f] = "Torun",
 [0x20] = "Koenigsberg",
 [0x21] = "Memel",
 [0x22] = "Windau",
 [0x23] = "Riga",
 [0x24] = "Pernau",
 [0x25] = "Reval",
 [0x26] = "Ladoga",
 [0x27] = "Novgorod",
}

facilityNames =
{
 [0x00] = "Militia",
 [0x01] = "Shipyard",
 [0x02] = "Unknown",
 [0x03] = "Weaponsmith",
 [0x04] = "HuntingLodge",
 [0x05] = "FishermansHut",
 [0x06] = "Brewery",
 [0x07] = "Workshop",
 [0x08] = "Apiary",
 [0x09] = "FarmGrain",
 [0x0a] = "FarmCattle",
 [0x0b] = "Sawmill",
 [0x0c] = "WeavingMill",
 [0x0d] = "Saltworks",
 [0x0e] = "IronSmelter",
 [0x0f] = "FarmSheep",
 [0x10] = "Vineyard",
 [0x11] = "Pottery",
 [0x12] = "Brickworks",
 [0x13] = "Pitchmaker",
 [0x14] = "FarmHemp",
}

Town = {}
Town.__index = Town

function getTownId(townIndex)
    local t = Town:create(townsAddress + townIndex*0x9f8, townIndex)
    return t:getTownId()
end

function Town:create(address, index)
    local obj = {}
    setmetatable(obj, Town)
    obj.Address = address
    obj.Index = index
    return obj
end

function Town:getTownId()
    return readByte(self.Address + 0x2c1)
end

function Town:createMemoryRecord()
    local record = addressList.createMemoryRecord()
    record.IsGroupHeader = true
    record.Options = "moManualExpandCollapse"
    record.appendToEntry(townsRecord)
    record.Description = townNames[self:getTownId()]
    self:createWaresRecords(record)
    self:createDailyPopulationConsumptionRecords(record)
    self:createConsumptionDataRecords(record)
    Church:create(self.Address + 0x794):createChurchRecords(record)

    local rawTownId = addressList.createMemoryRecord()
    rawTownId.Address = self.Address + 0x2c1;
    rawTownId.Description = "Town Id"
    rawTownId.Type = vtByte
    rawTownId.appendToEntry(record)

    local famineCounterRecord = addressList.createMemoryRecord()
    famineCounterRecord.Address = self.Address + 0x2c3;
    famineCounterRecord.Description = "Famine Counter"
    famineCounterRecord.Type = vtByte
    famineCounterRecord.appendToEntry(record)

    local landTaxRateRecord = addressList.createMemoryRecord()
    landTaxRateRecord.Address = self.Address + 0x2c6;
    landTaxRateRecord.Description = "Land Tax Rate"
    landTaxRateRecord.Type = vtByte
    landTaxRateRecord.appendToEntry(record)

    local headTaxRateRecord = addressList.createMemoryRecord()
    headTaxRateRecord.Address = self.Address + 0x6f8;
    headTaxRateRecord.Description = "Head Tax Rate"
    headTaxRateRecord.Type = vtByte
    headTaxRateRecord.appendToEntry(record)

    local extraTaxTimestamp = addressList.createMemoryRecord()
    extraTaxTimestamp.Address = self.Address + 0x6f8;
    extraTaxTimestamp.Description = "Extra Tax Timestamp"
    extraTaxTimestamp.appendToEntry(record)

    local streetsTotalTimestamp = addressList.createMemoryRecord()
    streetsTotalTimestamp.Address = self.Address + 0x792;
    streetsTotalTimestamp.Description = "Streets (total)"
    streetsTotalTimestamp.Type = vtWord
    streetsTotalTimestamp.appendToEntry(record)

    local streetsBuiltTimestamp = addressList.createMemoryRecord()
    streetsBuiltTimestamp.Address = self.Address + 0x790;
    streetsBuiltTimestamp.Description = "Streets (built)"
    streetsBuiltTimestamp.Type = vtWord
    streetsBuiltTimestamp.appendToEntry(record)

    local citizensTotalRecord = addressList.createMemoryRecord()
    citizensTotalRecord.Address = self.Address + 0x2d4;
    citizensTotalRecord.Description = "Citizens (total)"
    citizensTotalRecord.appendToEntry(record)

    local citizensRichRecord = addressList.createMemoryRecord()
    citizensRichRecord.Address = self.Address + 0x2d8;
    citizensRichRecord.Description = "Citizens (Rich)"
    citizensRichRecord.appendToEntry(record)

    local citizensWealthyRecord = addressList.createMemoryRecord()
    citizensWealthyRecord.Address = self.Address + 0x2dc;
    citizensWealthyRecord.Description = "Citizens (Wealthy)"
    citizensWealthyRecord.appendToEntry(record)

    local citizensPoorRecord = addressList.createMemoryRecord()
    citizensPoorRecord.Address = self.Address + 0x2e0;
    citizensPoorRecord.Description = "Citizens (Poor)"
    citizensPoorRecord.appendToEntry(record)

    local citizensBeggarRecord = addressList.createMemoryRecord()
    citizensBeggarRecord.Address = self.Address + 0x2e4;
    citizensBeggarRecord.Description = "Citizens (Beggar)"
    citizensBeggarRecord.appendToEntry(record)

    local satisfactionRichRecord = addressList.createMemoryRecord()
    satisfactionRichRecord.Address = self.Address + 0x0300;
    satisfactionRichRecord.Description = "Satisfaction (Rich)"
    satisfactionRichRecord.Type = vtWord
    satisfactionRichRecord.ShowAsSigned = true
    satisfactionRichRecord.appendToEntry(record)

    local satisfactionWealthyRecord = addressList.createMemoryRecord()
    satisfactionWealthyRecord.Address = self.Address + 0x302;
    satisfactionWealthyRecord.Description = "Satisfaction (Wealthy)"
    satisfactionWealthyRecord.Type = vtWord
    satisfactionWealthyRecord.ShowAsSigned = true
    satisfactionWealthyRecord.appendToEntry(record)

    local satisfactionPoorRecord = addressList.createMemoryRecord()
    satisfactionPoorRecord.Address = self.Address + 0x304;
    satisfactionPoorRecord.Description = "Satisfaction (Poor)"
    satisfactionPoorRecord.Type = vtWord
    satisfactionPoorRecord.ShowAsSigned = true
    satisfactionPoorRecord.appendToEntry(record)

    local satisfactionBeggarRecord = addressList.createMemoryRecord()
    satisfactionBeggarRecord.Address = self.Address + 0x306;
    satisfactionBeggarRecord.Description = "Satisfaction (Beggar)"
    satisfactionBeggarRecord.Type = vtWord
    satisfactionBeggarRecord.ShowAsSigned = true
    satisfactionBeggarRecord.appendToEntry(record)

    local wellsRecord = addressList.createMemoryRecord()
    wellsRecord.Address = self.Address + 0x789;
    wellsRecord.Description = "Wells"
    wellsRecord.Type = vtByte
    wellsRecord.appendToEntry(record)

    local desiredWareRecord = addressList.createMemoryRecord()
    desiredWareRecord.Address = self.Address + 0x6f0;
    desiredWareRecord.Description = "Bonus Ware Id"
    desiredWareRecord.Type = vtByte
    desiredWareRecord.appendToEntry(record)

    local beggarFlagsRecord = addressList.createMemoryRecord()
    beggarFlagsRecord.Address = self.Address + 0x76c;
    beggarFlagsRecord.Description = "Beggar Flags"
    beggarFlagsRecord.ShowAsHex = true
    beggarFlagsRecord.appendToEntry(record)

    local accusedMerchantRecord = addressList.createMemoryRecord()
    accusedMerchantRecord.Address = self.Address + 0x83d;
    accusedMerchantRecord.Description = "Accused Merchant"
    accusedMerchantRecord.Type = vtByte
    accusedMerchantRecord.ShowAsHex = true
    accusedMerchantRecord.appendToEntry(record)

    local facilitiesRecord = addressList.createMemoryRecord()
    facilitiesRecord.Description = "Facilities"
    facilitiesRecord.IsGroupHeader = true
    facilitiesRecord.Options = "moManualExpandCollapse"
    for i=0,19 do
        Facility:create(self.Address + 0x840 + 0x10*i, i):createMemoryRecord(facilitiesRecord)
    end
    facilitiesRecord.collapsed = true
    facilitiesRecord.appendToEntry(record)
    self:createMilitiaRecords(record)

    local field_75c_class31s_ptr_record = addressList.createMemoryRecord()
    field_75c_class31s_ptr_record.Description = "field_75c_class31s_ptr"
    field_75c_class31s_ptr_record.Address = self.Address + 0x75c;
    field_75c_class31s_ptr_record.ShowAsHex = true
    field_75c_class31s_ptr_record.appendToEntry(record)

    local field_776_class31s_len_record = addressList.createMemoryRecord()
    field_776_class31s_len_record.Description = "field_776_class31s_lend"
    field_776_class31s_len_record.Address = self.Address + 0x776;
    field_776_class31s_len_record.Type = vtWord
    field_776_class31s_len_record.appendToEntry(record)

    record.Collapsed = true
end

function Town:createMilitiaRecords(parentRecord)
    local record = addressList.createMemoryRecord();
    record.Collapsed = true
    record.IsGroupHeader = true
    record.Options = "moManualExpandCollapse"
    record.Description = "Militia"

    local swordsRecord = addressList.createMemoryRecord()
    swordsRecord.Address = self.Address + 0x0998 + 0x00;
    swordsRecord.Description = "Sword Squads"
    swordsRecord.Type = vtByte
    swordsRecord.appendToEntry(record)

    local bowsRecord = addressList.createMemoryRecord()
    bowsRecord.Address = self.Address + 0x0998 + 0x01;
    bowsRecord.Description = "Bow Squads"
    bowsRecord.Type = vtByte
    bowsRecord.appendToEntry(record)

    local crossbowsRecord = addressList.createMemoryRecord()
    crossbowsRecord.Address = self.Address + 0x0998 + 0x02;
    crossbowsRecord.Description = "Crossbow Squads"
    crossbowsRecord.Type = vtByte
    crossbowsRecord.appendToEntry(record)

    local musketsRecord = addressList.createMemoryRecord()
    musketsRecord.Address = self.Address + 0x0998 + 0x03;
    musketsRecord.Description = "Musket Squads"
    musketsRecord.Type = vtByte
    musketsRecord.appendToEntry(record)

    record.Collapsed = true
    record.appendToEntry(parentRecord)
end

function Town:createWaresRecords(parentRecord)
    local waresRecord = addressList.createMemoryRecord()
    waresRecord.IsGroupHeader = true
    waresRecord.Options = "moManualExpandCollapse"
    waresRecord.Description = "Wares"
    for i=0,23 do
        local wareRecord = addressList.createMemoryRecord()
        wareRecord.Address = self.Address + 0x04 + (i*4)
        wareRecord.appendToEntry(waresRecord)
        wareRecord.Description = wareNames[i]
    end
    waresRecord.Collapsed = true
    waresRecord.appendToEntry(parentRecord)
end

function Town:createDailyPopulationConsumptionRecords(parentRecord)
    local dailyPopulationConsumption = addressList.createMemoryRecord()
    dailyPopulationConsumption.IsGroupHeader = true
    dailyPopulationConsumption.Options = "moManualExpandCollapse"
    dailyPopulationConsumption.Description = "Daily Population Consumption"
    for i=0,23 do
        local wareRecord = addressList.createMemoryRecord()
        wareRecord.Address = self.Address + 0x310 + (i*4)
        wareRecord.appendToEntry(dailyPopulationConsumption)
        wareRecord.Description = wareNames[i]
    end
    dailyPopulationConsumption.Collapsed = true
    dailyPopulationConsumption.appendToEntry(parentRecord)
end

function Town:createConsumptionDataRecords(parentRecord)
    local consumptionDataRecord = addressList.createMemoryRecord()
    consumptionDataRecord.IsGroupHeader = true
    consumptionDataRecord.Options = "moManualExpandCollapse"
    consumptionDataRecord.Description = "Consumption Data"
    for i=0,23 do
        local wareData0 = addressList.createMemoryRecord()
        wareData0.Address = self.Address + 0x4f0 + (i*4)
        wareData0.appendToEntry(consumptionDataRecord)
        wareData0.Description = wareNames[i].." (weekly)"
        local wareData4 = addressList.createMemoryRecord()
        wareData4.Address = self.Address + 0x4f0 + (i*4) + 0x04
        wareData4.appendToEntry(consumptionDataRecord)
        wareData4.Description = wareNames[i].." (4)"
        local wareData8 = addressList.createMemoryRecord()
        wareData8.Address = self.Address + 0x4f0 + (i*4) + 0x08
        wareData8.appendToEntry(consumptionDataRecord)
        wareData8.Description = wareNames[i].." (8)"
        local wareDataC = addressList.createMemoryRecord()
        wareDataC.Address = self.Address + 0x4f0 + (i*4) + 0x0C
        wareDataC.appendToEntry(consumptionDataRecord)
        wareDataC.Description = wareNames[i].." (C)"
    end
    consumptionDataRecord.Collapsed = true
    consumptionDataRecord.appendToEntry(parentRecord)
end

Facility = {}
Facility.__index = Facility

function Facility:create(address, index)
    local obj = {}
    setmetatable(obj, Facility)
    obj.Address = address
    obj.Index = index
    return obj
end


function Facility:createMemoryRecord(parentRecord)
    local facilityId = readByte(self.Address + 0x06)
    local employees = readSmallInteger(self.Address + 0x04)
    if employees == 0 then
       return
    end
    local record = addressList.createMemoryRecord()
    record.IsGroupHeader = true
    record.Options = "moManualExpandCollapse"
    record.Description = facilityNames[facilityId]
    record.Collapsed = true

    local field0Record = addressList.createMemoryRecord()
    field0Record.Address = self.Address + 0x00;
    field0Record.Description = "field0Record"
    field0Record.appendToEntry(record)

    local employeesRecord = addressList.createMemoryRecord()
    employeesRecord.Address = self.Address + 0x04;
    employeesRecord.Description = "Employees"
    employeesRecord.Type = vtWord
    employeesRecord.appendToEntry(record)

    local typeRecord = addressList.createMemoryRecord()
    typeRecord.Address = self.Address + 0x06;
    typeRecord.Description = "Type"
    typeRecord.Type = vtByte
    typeRecord.appendToEntry(record)

    local productivityRecord = addressList.createMemoryRecord()
    productivityRecord.Address = self.Address + 0x08;
    productivityRecord.Description = "Productivity"
    productivityRecord.Type = vtWord
    productivityRecord.appendToEntry(record)

    local aRecord = addressList.createMemoryRecord()
    aRecord.Address = self.Address + 0x0a;
    aRecord.Description = "a"
    aRecord.Type = vtWord
    aRecord.appendToEntry(record)

    local cRecord = addressList.createMemoryRecord()
    cRecord.Address = self.Address + 0x0c;
    cRecord.Description = "c"
    cRecord.Type = vtWord
    cRecord.appendToEntry(record)

    local eRecord = addressList.createMemoryRecord()
    eRecord.Address = self.Address + 0x0e;
    eRecord.Description = "e"
    eRecord.Type = vtWord
    eRecord.appendToEntry(record)

    record.Collapsed = true

    record.appendToEntry(parentRecord)
end

Merchant = {}
Merchant.__index = Merchant

function Merchant:create(address, index)
    local obj = {}
    setmetatable(obj, Merchant)
    obj.Address = address
    obj.Index = index
    return obj
end

function Merchant:createMemoryRecord()
    local record = addressList.createMemoryRecord()
    record.IsGroupHeader = true
    record.Options = "moManualExpandCollapse"
    record.appendToEntry(merchantsRecord)
    record.Description = self.Index
    self:createReputationRecords(record)
    self:createRankRecords(record)
    self:createOfficeRecords(record)

    local hometownIndexRecord = addressList.createMemoryRecord()
    hometownIndexRecord.Address = self.Address + 0x19;
    hometownIndexRecord.Description = "Hometown Index"
    hometownIndexRecord.Type = vtByte
    hometownIndexRecord.appendToEntry(record)

    local nameRecord = addressList.createMemoryRecord()
    nameRecord.Address = string.format("+%X", readInteger(self.Address + 0xe8))
    nameRecord.Description = "Name"
    nameRecord.Type = vtString
    nameRecord.String.Size = 10
    nameRecord.appendToEntry(record)

    local familyNameRecord = addressList.createMemoryRecord()
    familyNameRecord.Address = string.format("[%X]", self.Address + 0xe4)
    familyNameRecord.Description = "Family Name"
    familyNameRecord.Type = vtString
    familyNameRecord.String.Size = 10
    familyNameRecord.appendToEntry(record)

    local moneyRecord = addressList.createMemoryRecord()
    moneyRecord.Address = self.Address + 0x00;
    moneyRecord.Description = "Money"
    moneyRecord.ShowAsSigned = true
    moneyRecord.appendToEntry(record)

    local companyValueRecord = addressList.createMemoryRecord()
    companyValueRecord.Address = self.Address + 0x46c;
    companyValueRecord.Description = "Company Value"
    companyValueRecord.appendToEntry(record)

    local companyCapacityRecord = addressList.createMemoryRecord()
    companyCapacityRecord.Address = self.Address + 0x470;
    companyCapacityRecord.Description = "Company Capacity"
    companyCapacityRecord.appendToEntry(record)

    local _1eRecord = addressList.createMemoryRecord()
    _1eRecord.Address = self.Address + 0x1e;
    _1eRecord.Description = "1e"
    _1eRecord.Type = vtByte
    _1eRecord.appendToEntry(record)

    local _31Record = addressList.createMemoryRecord()
    _31Record.Address = self.Address + 0x31;
    _31Record.Description = "Spouse Hometown Index" -- .. townNames[getTownId(readByte(self.Address + 0x31))] .. ")"
    _31Record.Type = vtByte
    _31Record.appendToEntry(record)

    local _32Record = addressList.createMemoryRecord()
    _32Record.Address = self.Address + 0x32;
    _32Record.Description = "Spouse Reputation Bonus"
    _32Record.Type = vtByte
    _32Record.appendToEntry(record)

    local _8Record = addressList.createMemoryRecord()
    _8Record.Address = self.Address + 0x08;
    _8Record.Description = "8"
    _8Record.Type = vtWord
    _8Record.appendToEntry(record)

    local baseRepFactorRecord = addressList.createMemoryRecord()
    baseRepFactorRecord.Address = self.Address + 0x464;
    baseRepFactorRecord.Description = "baseRepFactorRecord"
    baseRepFactorRecord.Type = vtSingle
    baseRepFactorRecord.appendToEntry(record)

    record.Collapsed = true
end

function Merchant:createReputationRecords(parentRecord)
    local reputationRecords = addressList.createMemoryRecord()
    reputationRecords.IsGroupHeader = true
    reputationRecords.Options = "moManualExpandCollapse"
    reputationRecords.Description = "Reputations"
    for i=0,townsCount-1 do
        local reputationRecord = addressList.createMemoryRecord()
        reputationRecord.IsGroupHeader = true
        reputationRecord.Options = "moManualExpandCollapse"
        reputationRecord.Address = self.Address + 0x2fc + (i*4)
        reputationRecord.Type = vtSingle
        reputationRecord.Description = townNames[getTownId(i)]
        reputationRecord.appendToEntry(reputationRecords)

        local buildingReputationRecord = addressList.createMemoryRecord()
        buildingReputationRecord.Address = self.Address + 0x11c + (i*3*4)
        buildingReputationRecord.Type = vtSingle
        buildingReputationRecord.Description = "Buildings"
        buildingReputationRecord.appendToEntry(reputationRecord)

        local donationsReputationRecord = addressList.createMemoryRecord()
        donationsReputationRecord.Address = self.Address + 0x11c + 0x04 + (i*3*4)
        donationsReputationRecord.Type = vtSingle
        donationsReputationRecord.Description = "Donations"
        donationsReputationRecord.appendToEntry(reputationRecord)

        local tradingReputationRecord = addressList.createMemoryRecord()
        tradingReputationRecord.Address = self.Address + 0x11c + 0x08 + (i*3*4)
        tradingReputationRecord.Type = vtSingle
        tradingReputationRecord.Description = "Trading"
        tradingReputationRecord.appendToEntry(reputationRecord)

        local sailorReputationRecord = addressList.createMemoryRecord()
        sailorReputationRecord.Address = self.Address + 0xf0 + i
        sailorReputationRecord.Type = vtByte
        sailorReputationRecord.Description = "Sailors"
        sailorReputationRecord.appendToEntry(reputationRecord)


        reputationRecord.Collapsed = true
    end
    reputationRecords.Collapsed = true
    reputationRecords.appendToEntry(parentRecord)
end

function Merchant:createRankRecords(parentRecord)
    local rankRecords = addressList.createMemoryRecord()
    rankRecords.IsGroupHeader = true
    rankRecords.Options = "moManualExpandCollapse"
    rankRecords.Description = "Ranks"
    for i=0,townsCount-1 do
        local reputationRecord = addressList.createMemoryRecord()
        reputationRecord.Address = self.Address + 0x39c + i
        reputationRecord.appendToEntry(rankRecords)
        reputationRecord.Description = townNames[getTownId(i)]
        reputationRecord.Type = vtByte
    end
    rankRecords.Collapsed = true
    rankRecords.appendToEntry(parentRecord)
end

function Merchant:createOfficeRecords(parentRecord)
    local officeRecords = addressList.createMemoryRecord()
    officeRecords.IsGroupHeader = true
    officeRecords.Options = "moManualExpandCollapse"
    officeRecords.Description = "Offices"
    local officeIndex = readSmallInteger(self.Address + 0x0c)
    while officeIndex &lt; officesCount do
        local office = Office:create(officesAddress + officeIndex * 0x44c, officeIndex)
        office:createMemoryRecord(officeRecords)
        officeIndex = office:getNextOfficeOfMerchantIndex()
    end
    officeRecords.Collapsed = true
    officeRecords.appendToEntry(parentRecord)
end

Office = {}
Office.__index = Office

function Office:create(address, index)
    local obj = {}
    setmetatable(obj, Office)
    obj.Address = address
    obj.Index = index
    return obj
end

function Office:getTownIndex()
    return readSmallInteger(self.Address + 0x2c6)
end

function Office:getNextOfficeOfMerchantIndex()
    return readSmallInteger(self.Address + 0x2c8)
end

function Office:createMemoryRecord(parentRecord)
    local record = addressList.createMemoryRecord()
    record.IsGroupHeader = true
    record.Options = "moManualExpandCollapse"
    record.Description = townNames[getTownId(self:getTownIndex())]

    local _2e4RichRecord = addressList.createMemoryRecord()
    _2e4RichRecord.Address = self.Address + 0x2e4 + 0x00;
    _2e4RichRecord.Description = "Rent Rich"
    _2e4RichRecord.Type = vtByte
    _2e4RichRecord.appendToEntry(record)

    local _2e4WealthyRecord = addressList.createMemoryRecord()
    _2e4WealthyRecord.Address = self.Address + 0x2e4 + 0x01;
    _2e4WealthyRecord.Description = "Rent Wealthy"
    _2e4WealthyRecord.Type = vtByte
    _2e4WealthyRecord.appendToEntry(record)

    local _2e4PoorRecord = addressList.createMemoryRecord()
    _2e4PoorRecord.Address = self.Address + 0x2e4 + 0x02;
    _2e4PoorRecord.Description = "Rent Poor"
    _2e4PoorRecord.Type = vtByte
    _2e4PoorRecord.appendToEntry(record)

    local _2deRichRecord = addressList.createMemoryRecord()
    _2deRichRecord.Address = self.Address + 0x2de + (0x00 * 2);
    _2deRichRecord.Description = "Tenants Rich"
    _2deRichRecord.Type = vtWord
    _2deRichRecord.appendToEntry(record)

    local _2deWealthyRecord = addressList.createMemoryRecord()
    _2deWealthyRecord.Address = self.Address + 0x2de + (0x01 * 2);
    _2deWealthyRecord.Description = "Tenants Wealthy"
    _2deWealthyRecord.Type = vtWord
    _2deWealthyRecord.appendToEntry(record)

    local _2dePoorRecord = addressList.createMemoryRecord()
    _2dePoorRecord.Address = self.Address + 0x2de + (0x02 * 2);
    _2dePoorRecord.Description = "Tenants Poor"
    _2dePoorRecord.Type = vtWord
    _2dePoorRecord.appendToEntry(record)

    record.Collapsed = true
    record.appendToEntry(parentRecord)
end

Church = {}
Church.__index = Church

function Church:create(address)
    local obj = {}
    setmetatable(obj, Church)
    obj.Address = address
    return obj
end

function Church:createChurchRecords(parentRecord)
    local churchRecord = addressList.createMemoryRecord()
    churchRecord.IsGroupHeader = true
    churchRecord.Options = "moManualExpandCollapse"
    churchRecord.Description = "Church"

    local donationsRecord = addressList.createMemoryRecord()
    donationsRecord.Address = self.Address + 0x00
    donationsRecord.Description = "Social"
    donationsRecord.appendToEntry(churchRecord)

    local extensionDonationsRecord = addressList.createMemoryRecord()
    extensionDonationsRecord.Address = self.Address + 0x04
    extensionDonationsRecord.Description = "Extension Donations"
    extensionDonationsRecord.appendToEntry(churchRecord)

    local _8Record = addressList.createMemoryRecord()
    _8Record.Address = self.Address + 0x08
    _8Record.Description = "_8Record"
    _8Record.appendToEntry(churchRecord)

    local extensionLevelRecord = addressList.createMemoryRecord()
    extensionLevelRecord.Address = self.Address + 0x0f
    extensionLevelRecord.Description = "Extension Level"
    extensionLevelRecord.Type = vtByte
    extensionLevelRecord.appendToEntry(churchRecord)

    churchRecord.Collapsed = true
    churchRecord.appendToEntry(parentRecord)
end

Class5 = {}
Class5.__index = Class5

function Class5:create(address)
    local obj = {}
    setmetatable(obj, Class5)
    obj.Address = address
    return obj
end

function Class5:createMemoryRecord(parentRecord)
    local class5Record = addressList.createMemoryRecord()
    class5Record.IsGroupHeader = true
    class5Record.Options = "moManualExpandCollapse"
    class5Record.Description = "Class5"

    local _0Record = addressList.createMemoryRecord()
    _0Record.Address = self.Address + 0x00
    _0Record.Description = "0x00"
    _0Record.ShowAsHex = true
    _0Record.appendToEntry(class5Record)

    local _4Record = addressList.createMemoryRecord()
    _4Record.Address = self.Address + 0x04
    _4Record.Description = "0x04"
    _4Record.ShowAsHex = true
    _4Record.appendToEntry(class5Record)

    local _8Record = addressList.createMemoryRecord()
    _8Record.Address = self.Address + 0x08
    _8Record.Description = "0x08 class28 ptr"
    _8Record.ShowAsHex = true
    _8Record.appendToEntry(class5Record)

    local _cRecord = addressList.createMemoryRecord()
    _cRecord.Address = self.Address + 0x0c
    _cRecord.Description = "0x0c"
    _cRecord.ShowAsHex = true
    _cRecord.appendToEntry(class5Record)

    local _10Record = addressList.createMemoryRecord()
    _10Record.Address = self.Address + 0x10
    _10Record.Description = "0x10"
    _10Record.ShowAsHex = true
    _10Record.appendToEntry(class5Record)

    local _14Record = addressList.createMemoryRecord()
    _14Record.Address = self.Address + 0x14
    _14Record.Description = "0x14"
    _14Record.ShowAsHex = true
    _14Record.appendToEntry(class5Record)

    local _18Record = addressList.createMemoryRecord()
    _18Record.Address = self.Address + 0x18
    _18Record.Description = "0x18"
    _18Record.ShowAsHex = true
    _18Record.appendToEntry(class5Record)

    local someObjectRecord = addressList.createMemoryRecord()
    someObjectRecord.Address = string.format("[%X] + 8", self.Address + 0x08)
    someObjectRecord.Description = "class5.field_8_class28_ptr-&gt;field_8_tickable-&gt;field_0_vtable_ptr"
    someObjectRecord.ShowAsHex = true
    someObjectRecord.appendToEntry(class5Record)

    class5Record.Collapsed = true
    class5Record.appendToEntry(parentRecord)
end

gameWorldAddress = 0x006DE4A0
addressList = getAddressList()


-- GameWorld
local gameWorldRecord = addressList.createMemoryRecord()
gameWorldRecord.Description = "GameWorld"
gameWorldRecord.IsGroupHeader = true
gameWorldRecord.Options = "moManualExpandCollapse"

local domRecord = addressList.createMemoryRecord()
domRecord.Description = "Day of Month"
domRecord.Address = gameWorldAddress + 0x00
domRecord.Type = vtByte
domRecord.appendToEntry(gameWorldRecord)

local townsCountRecord = addressList.createMemoryRecord()
townsCountRecord.Description = "Towns"
townsCountRecord.Address = gameWorldAddress + 0x10
townsCountRecord.Type = vtWord
townsCountRecord.appendToEntry(gameWorldRecord)

local gametimeRecord = addressList.createMemoryRecord()
gametimeRecord.Description = "Gametime"
gametimeRecord.Address = gameWorldAddress + 0x14
gametimeRecord.ShowAsHex = true
gametimeRecord.appendToEntry(gameWorldRecord)

local churchFactorRecord = addressList.createMemoryRecord()
churchFactorRecord.Description = "Church Factor"
churchFactorRecord.Address = gameWorldAddress + 0x8c
churchFactorRecord.Type = vtByte
churchFactorRecord.appendToEntry(gameWorldRecord)

gameWorldRecord.Collapsed = true


-- Towns
townsCount = readSmallInteger(gameWorldAddress + 0x10)
townsRecord = addressList.createMemoryRecord()
townsAddress = readInteger(gameWorldAddress + 0x68)
townsRecord.Description = "Towns"
townsRecord.IsGroupHeader = true
townsRecord.Options="moManualExpandCollapse"


-- Offices
officesCount = readSmallInteger(gameWorldAddress + 0x08)
officesAddress = readInteger(gameWorldAddress + 0x74)

for i=0,townsCount-1 do
    local t = Town:create(townsAddress + i*0x9f8, i)
    t:createMemoryRecord()
end

townsRecord.Collapsed = true


-- Merchants
merchantsRecord = addressList.createMemoryRecord()
merchantsAddress = readInteger(gameWorldAddress + 0x78)
merchantsRecord.Description = "Merchants"
merchantsRecord.IsGroupHeader = true
merchantsRecord.Options="moManualExpandCollapse"

local m = Merchant:create(merchantsAddress + 0x24 * 0x650, 0x24)
m:createMemoryRecord()

local m2 = Merchant:create(merchantsAddress + 0x01 * 0x650, 0x01)
m2:createMemoryRecord()

merchantsRecord.Collapsed = true


-- Operations
operationsAddress = 0x006DF2F0
local operationsRecord = addressList.createMemoryRecord()
operationsRecord.Description = "Operations"
operationsRecord.IsGroupHeader = true
operationsRecord.Options = "moManualExpandCollapse"

local _24cRecord = addressList.createMemoryRecord()
_24cRecord.Description = "field_24c"
_24cRecord.Address = operationsAddress + 0x24c
_24cRecord.ShowAsHex = true
_24cRecord.appendToEntry(operationsRecord)

local fastForwardRecord = addressList.createMemoryRecord()
fastForwardRecord.Description = "Fast Forward"
fastForwardRecord.Address = operationsAddress + 0x92c
fastForwardRecord.appendToEntry(operationsRecord)

local stopFastForwardRecord = addressList.createMemoryRecord()
stopFastForwardRecord.Description = "Stop Fast Forward"
stopFastForwardRecord.Address = operationsAddress + 0x914
stopFastForwardRecord.appendToEntry(operationsRecord)

operationsRecord.Collapsed = true


-- Game Loop
gameLoopAddress = 0x006DA5F0
gameLoopRecord = addressList.createMemoryRecord()
gameLoopRecord.Description = "GameLoop"
gameLoopRecord.IsGroupHeader = true
gameLoopRecord.Options = "moManualExpandCollapse"

local c5 = Class5:create(gameLoopAddress + 0x04)
c5:createMemoryRecord(gameLoopRecord)

gameLoopRecord.Collapsed = true

</LuaScript>
</CheatTable>
